package net.tigereye.chestcavity.guscript.ast;

import com.google.common.collect.HashMultiset;
import com.google.common.collect.Multiset;
import net.minecraft.resources.ResourceLocation;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * Operator node generated by a reaction rule. It wraps child nodes to form an AST tree.
 */
public final class OperatorGuNode implements GuNode {
    private final String name;
    private final String operatorId;
    private final GuNodeKind kind;
    private final Multiset<String> tags;
    private final List<Action> actions;
    private final List<GuNode> children;
    private final Integer executionOrder;
    private final boolean exportMultiplier;
    private final boolean exportFlat;
    private final ResourceLocation flowId;
    private final Map<String, String> flowParams;
    private final Integer primarySlotIndex;
    private final Integer adjacencySpanHint;
    private final Integer rulePriority;
    private final Integer reductionSequence;

    public OperatorGuNode(String operatorId, String name, GuNodeKind kind,
                          Multiset<String> tags, List<Action> actions, List<GuNode> children) {
        this(operatorId, name, kind, tags, actions, children, null, false, false, null, Map.of(), null, null, null, null);
    }

    public OperatorGuNode(String operatorId, String name, GuNodeKind kind,
                          Multiset<String> tags, List<Action> actions, List<GuNode> children,
                          Integer executionOrder, boolean exportMultiplier, boolean exportFlat) {
        this(operatorId, name, kind, tags, actions, children, executionOrder, exportMultiplier, exportFlat, null, Map.of(), null, null, null, null);
    }

    public OperatorGuNode(String operatorId, String name, GuNodeKind kind,
                          Multiset<String> tags, List<Action> actions, List<GuNode> children,
                          Integer executionOrder, boolean exportMultiplier, boolean exportFlat,
                          ResourceLocation flowId, Map<String, String> flowParams) {
        this(operatorId, name, kind, tags, actions, children, executionOrder, exportMultiplier, exportFlat, flowId, flowParams, null, null, null, null);
    }

    private OperatorGuNode(String operatorId, String name, GuNodeKind kind,
                          Multiset<String> tags, List<Action> actions, List<GuNode> children,
                          Integer executionOrder, boolean exportMultiplier, boolean exportFlat,
                          ResourceLocation flowId, Map<String, String> flowParams,
                          Integer primarySlotIndex, Integer adjacencySpanHint,
                          Integer rulePriority, Integer reductionSequence) {
        if (operatorId == null || operatorId.isBlank()) {
            throw new IllegalArgumentException("Operator requires an id");
        }
        if (name == null || name.isBlank()) {
            throw new IllegalArgumentException("Operator requires a display name");
        }
        this.operatorId = operatorId;
        this.name = name;
        this.kind = kind == null ? GuNodeKind.OPERATOR : kind;
        this.tags = tags == null ? HashMultiset.create() : HashMultiset.create(tags);
        this.actions = actions == null ? new ArrayList<>() : new ArrayList<>(actions);
        this.children = children == null ? List.of() : List.copyOf(children);
        this.executionOrder = executionOrder;
        this.exportMultiplier = exportMultiplier;
        this.exportFlat = exportFlat;
        this.flowId = flowId;
        if (flowParams == null || flowParams.isEmpty()) {
            this.flowParams = Map.of();
        } else {
            this.flowParams = Collections.unmodifiableMap(new LinkedHashMap<>(flowParams));
        }
        this.primarySlotIndex = primarySlotIndex;
        this.adjacencySpanHint = adjacencySpanHint;
        this.rulePriority = rulePriority;
        this.reductionSequence = reductionSequence;
    }

    public String operatorId() {
        return operatorId;
    }

    @Override
    public String name() {
        return name;
    }

    @Override
    public GuNodeKind kind() {
        return kind;
    }

    @Override
    public Multiset<String> tags() {
        return tags;
    }

    @Override
    public List<Action> actions() {
        return actions;
    }

    @Override
    public List<GuNode> children() {
        return children;
    }

    public OptionalInt executionOrder() {
        return executionOrder == null ? OptionalInt.empty() : OptionalInt.of(executionOrder);
    }

    public boolean exportMultiplier() {
        return exportMultiplier;
    }

    public boolean exportFlat() {
        return exportFlat;
    }

    public Optional<ResourceLocation> flowId() {
        return Optional.ofNullable(flowId);
    }

    public Map<String, String> flowParams() {
        return flowParams;
    }

    public OptionalInt primarySlotIndex() {
        return primarySlotIndex == null ? OptionalInt.empty() : OptionalInt.of(primarySlotIndex);
    }

    public OptionalInt adjacencySpanHint() {
        return adjacencySpanHint == null ? OptionalInt.empty() : OptionalInt.of(adjacencySpanHint);
    }

    public OptionalInt rulePriorityHint() {
        return rulePriority == null ? OptionalInt.empty() : OptionalInt.of(rulePriority);
    }

    public OptionalInt reductionSequence() {
        return reductionSequence == null ? OptionalInt.empty() : OptionalInt.of(reductionSequence);
    }

    public OperatorGuNode withKind(GuNodeKind newKind) {
        return new OperatorGuNode(
                operatorId,
                name,
                newKind,
                tags,
                actions,
                children,
                executionOrder,
                exportMultiplier,
                exportFlat,
                flowId,
                flowParams,
                primarySlotIndex,
                adjacencySpanHint,
                rulePriority,
                reductionSequence
        );
    }

    public OperatorGuNode withOrderingMetadata(Integer primarySlotIndex,
                                               Integer adjacencySpanHint,
                                               Integer rulePriority,
                                               Integer reductionSequence) {
        return new OperatorGuNode(
                operatorId,
                name,
                kind,
                tags,
                actions,
                children,
                executionOrder,
                exportMultiplier,
                exportFlat,
                flowId,
                flowParams,
                primarySlotIndex,
                adjacencySpanHint,
                rulePriority,
                reductionSequence
        );
    }

    @Override
    public String toString() {
        return "OperatorGuNode{" +
                "operatorId='" + operatorId + '\'' +
                ", name='" + name + '\'' +
                ", kind=" + kind +
                ", tags=" + tags +
                ", actions=" + actions +
                ", children=" + children +
                ", order=" + executionOrder +
                ", exportMultiplier=" + exportMultiplier +
                ", exportFlat=" + exportFlat +
                ", flowId=" + flowId +
                ", flowParams=" + flowParams +
                ", primarySlotIndex=" + primarySlotIndex +
                ", adjacencySpan=" + adjacencySpanHint +
                ", rulePriority=" + rulePriority +
                ", reductionSequence=" + reductionSequence +
                '}';
    }
}
