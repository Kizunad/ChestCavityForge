package net.tigereye.chestcavity.guscript.ast;

import com.google.common.collect.HashMultiset;
import com.google.common.collect.Multiset;

import java.util.ArrayList;
import java.util.List;
import java.util.OptionalInt;

/**
 * Operator node generated by a reaction rule. It wraps child nodes to form an AST tree.
 */
public final class OperatorGuNode implements GuNode {
    private final String name;
    private final String operatorId;
    private final GuNodeKind kind;
    private final Multiset<String> tags;
    private final List<Action> actions;
    private final List<GuNode> children;
    private final Integer executionOrder;
    private final boolean exportMultiplier;
    private final boolean exportFlat;

    public OperatorGuNode(String operatorId, String name, GuNodeKind kind,
                          Multiset<String> tags, List<Action> actions, List<GuNode> children) {
        this(operatorId, name, kind, tags, actions, children, null, false, false);
    }

    public OperatorGuNode(String operatorId, String name, GuNodeKind kind,
                          Multiset<String> tags, List<Action> actions, List<GuNode> children,
                          Integer executionOrder, boolean exportMultiplier, boolean exportFlat) {
        if (operatorId == null || operatorId.isBlank()) {
            throw new IllegalArgumentException("Operator requires an id");
        }
        if (name == null || name.isBlank()) {
            throw new IllegalArgumentException("Operator requires a display name");
        }
        this.operatorId = operatorId;
        this.name = name;
        this.kind = kind == null ? GuNodeKind.OPERATOR : kind;
        this.tags = tags == null ? HashMultiset.create() : HashMultiset.create(tags);
        this.actions = actions == null ? new ArrayList<>() : new ArrayList<>(actions);
        this.children = children == null ? List.of() : List.copyOf(children);
        this.executionOrder = executionOrder;
        this.exportMultiplier = exportMultiplier;
        this.exportFlat = exportFlat;
    }

    public String operatorId() {
        return operatorId;
    }

    @Override
    public String name() {
        return name;
    }

    @Override
    public GuNodeKind kind() {
        return kind;
    }

    @Override
    public Multiset<String> tags() {
        return tags;
    }

    @Override
    public List<Action> actions() {
        return actions;
    }

    @Override
    public List<GuNode> children() {
        return children;
    }

    public OptionalInt executionOrder() {
        return executionOrder == null ? OptionalInt.empty() : OptionalInt.of(executionOrder);
    }

    public boolean exportMultiplier() {
        return exportMultiplier;
    }

    public boolean exportFlat() {
        return exportFlat;
    }

    @Override
    public String toString() {
        return "OperatorGuNode{" +
                "operatorId='" + operatorId + '\'' +
                ", name='" + name + '\'' +
                ", kind=" + kind +
                ", tags=" + tags +
                ", actions=" + actions +
                ", children=" + children +
                ", order=" + executionOrder +
                ", exportMultiplier=" + exportMultiplier +
                ", exportFlat=" + exportFlat +
                '}';
    }
}
